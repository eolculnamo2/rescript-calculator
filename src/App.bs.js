// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pad from "./components/Pad.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Display from "./components/Display.bs.js";
import * as Calculate from "./modules/Calculate.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import ReactSvg from "./assets/react.svg";

import './App.css'
;

var reactLogo = ReactSvg;

var validCharacters = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "0",
  "+",
  "-",
  "=",
  "*",
  "/"
];

var state = {
  symbols: []
};

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return {
              symbols: []
            };
    }
    var answer = Calculate.make(state.symbols);
    return {
            symbols: [String(answer)]
          };
  }
  var v = action._0;
  if (validCharacters.includes(v) === false) {
    console.warn("Invalid character received");
    return state;
  }
  var item = state.symbols.slice(0).pop();
  if (item !== undefined) {
    if (Calculate.operators.includes(item) && Calculate.operators.includes(v)) {
      return {
              symbols: Belt_Array.slice(state.symbols, 0, state.symbols.length - 1 | 0).concat([v])
            };
    } else {
      return {
              symbols: state.symbols.concat([v])
            };
    }
  } else if (state.symbols.length < 1 && Calculate.operators.includes(v)) {
    return state;
  } else {
    return {
            symbols: [v]
          };
  }
}

function App(Props) {
  var match = React.useReducer(reducer, state);
  var dispatch = match[1];
  return React.createElement("div", {
              className: "App"
            }, React.createElement(Display.make, {
                  values: match[0].symbols
                }), React.createElement(Pad.make, {
                  gatherValue: (function (v) {
                      return Curry._1(dispatch, /* InputReceived */{
                                  _0: v
                                });
                    }),
                  compute: (function (param) {
                      return Curry._1(dispatch, /* Compute */0);
                    }),
                  clear: (function (param) {
                      return Curry._1(dispatch, /* Clear */1);
                    })
                }));
}

var make = App;

export {
  reactLogo ,
  validCharacters ,
  state ,
  reducer ,
  make ,
  
}
/*  Not a pure module */
